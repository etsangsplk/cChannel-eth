// Copyright 2018 Celer Network

syntax = "proto3";

option java_multiple_files = true;
option java_package = "network.celer.goceler.chain";
option java_outer_classname = "ChainProto";
option go_package = "github.com/celer-network/goCeler/rpc";

package rpc;

import "solidity.proto";

// Next Tag: 5
message AuthorizedWithdraw {
  repeated solidity.address peers = 1;
  repeated solidity.uint256 values = 2;
  solidity.address withdraw_address = 3;
  solidity.uint256 nonce = 4;
}

message StateProof {
  solidity.uint256 nonce = 1;
  bytes state = 2; // each state channel has its own state interpreter
  solidity.bytes32 pending_condition_root = 3;
  solidity.uint256 state_channel_id = 4;
  solidity.uint256 max_cond_timeout = 5;
}

message MultiSignature {
  repeated solidity.uint8 v = 1;
  repeated solidity.bytes32 r = 2;
  repeated solidity.bytes32 s = 3;
}


message StateDepositMapEntry {
	solidity.address owner = 1;
	solidity.uint256 state_deposit = 2;
}

message ConditionGroup {
  repeated Condition conditions = 1;

  /*
  	pb3sol does not implement enum
  	use integer type instead
  	logic_type: 0 (generic)
  	logic_type: 1 (pre-compiled: PaymentBooleanAnd)
  	more pre-compiled logic types to be implemented...
  */
  uint32 logic_type = 2;
  repeated StateDepositMapEntry state_deposit_map = 3;

  /* 
    This following field should be parsed according to the logic_type. 
    It can be a BooleanAndLogic, where state updaet is pre-defined, 
    or can be more flexible and 
    generic condition with arbitrary state returned
  */
  bytes group_resolve_logic = 4;
}

message Condition {
  uint64 id = 1;
  uint64 timeout = 2;

  /* The following fields contain the logic for resolving a condition */

  // address of the contarct that resolves the condition
  solidity.bytes32 depending_contract_address = 3;

  /*
  	pb3sol does not implement enum
  	use integer type instead
  	address_type: 0 (off_chain)
  	address_type: 1 (on_chain)
  */  
  uint32 address_type = 4;

  // args used to query whether the condition is finalized
  bytes args_query_finalization = 5;

  /*
  	args used to query the condion resolution results
  	- query should return True/False for boolean condition
  	- query should return state update for generic condition
  */
  bytes args_query_result = 6;
}

// This message can be used as the logic object for PaymentBooleanAnd logic
message TransferMapEntry {
	solidity.address sender = 1;
	solidity.address receiver = 2;
	solidity.uint256 transfer_amount = 3;
}

message PaymentChannelState {
  repeated TransferMapEntry transfer_map = 1;
}

message PaymentBooleanAndResolveLogic {
  repeated TransferMapEntry updated_transfer_map = 1;
}

message CooperativeWithdrawProof {
  solidity.uint256 nonce = 1;
  solidity.uint256 state_channel_id = 2;
  solidity.uint256 withdrawal_amount = 3;
  solidity.address receiver = 4;
}
